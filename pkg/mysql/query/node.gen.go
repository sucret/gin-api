// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gin-api/pkg/mysql/model"
)

func newNode(db *gorm.DB) node {
	_node := node{}

	_node.nodeDo.UseDB(db)
	_node.nodeDo.UseModel(&model.Node{})

	tableName := _node.nodeDo.TableName()
	_node.ALL = field.NewAsterisk(tableName)
	_node.NodeID = field.NewInt32(tableName, "node_id")
	_node.Title = field.NewString(tableName, "title")
	_node.Name = field.NewString(tableName, "name")
	_node.Type = field.NewInt32(tableName, "type")
	_node.Path = field.NewString(tableName, "path")
	_node.Icon = field.NewString(tableName, "icon")
	_node.ParentNodeID = field.NewInt32(tableName, "parent_node_id")
	_node.Component = field.NewString(tableName, "component")
	_node.Redirect = field.NewString(tableName, "redirect")
	_node.CreatedAt = field.NewTime(tableName, "created_at")

	_node.fillFieldMap()

	return _node
}

type node struct {
	nodeDo nodeDo

	ALL          field.Asterisk
	NodeID       field.Int32
	Title        field.String // 名称
	Name         field.String // 页面名称
	Type         field.Int32  // 类型，1|菜单，2|页面，3|菜单&页面，4|接口
	Path         field.String // 操作路径
	Icon         field.String // 图标
	ParentNodeID field.Int32  // 上级节点ID
	Component    field.String
	Redirect     field.String // 重定向地址
	CreatedAt    field.Time   // 创建时间

	fieldMap map[string]field.Expr
}

func (n node) Table(newTableName string) *node {
	n.nodeDo.UseTable(newTableName)
	return n.updateTableName(newTableName)
}

func (n node) As(alias string) *node {
	n.nodeDo.DO = *(n.nodeDo.As(alias).(*gen.DO))
	return n.updateTableName(alias)
}

func (n *node) updateTableName(table string) *node {
	n.ALL = field.NewAsterisk(table)
	n.NodeID = field.NewInt32(table, "node_id")
	n.Title = field.NewString(table, "title")
	n.Name = field.NewString(table, "name")
	n.Type = field.NewInt32(table, "type")
	n.Path = field.NewString(table, "path")
	n.Icon = field.NewString(table, "icon")
	n.ParentNodeID = field.NewInt32(table, "parent_node_id")
	n.Component = field.NewString(table, "component")
	n.Redirect = field.NewString(table, "redirect")
	n.CreatedAt = field.NewTime(table, "created_at")

	n.fillFieldMap()

	return n
}

func (n *node) WithContext(ctx context.Context) INodeDo { return n.nodeDo.WithContext(ctx) }

func (n node) TableName() string { return n.nodeDo.TableName() }

func (n node) Alias() string { return n.nodeDo.Alias() }

func (n *node) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := n.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (n *node) fillFieldMap() {
	n.fieldMap = make(map[string]field.Expr, 10)
	n.fieldMap["node_id"] = n.NodeID
	n.fieldMap["title"] = n.Title
	n.fieldMap["name"] = n.Name
	n.fieldMap["type"] = n.Type
	n.fieldMap["path"] = n.Path
	n.fieldMap["icon"] = n.Icon
	n.fieldMap["parent_node_id"] = n.ParentNodeID
	n.fieldMap["component"] = n.Component
	n.fieldMap["redirect"] = n.Redirect
	n.fieldMap["created_at"] = n.CreatedAt
}

func (n node) clone(db *gorm.DB) node {
	n.nodeDo.ReplaceDB(db)
	return n
}

type nodeDo struct{ gen.DO }

type INodeDo interface {
	gen.SubQuery
	Debug() INodeDo
	WithContext(ctx context.Context) INodeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) INodeDo
	Not(conds ...gen.Condition) INodeDo
	Or(conds ...gen.Condition) INodeDo
	Select(conds ...field.Expr) INodeDo
	Where(conds ...gen.Condition) INodeDo
	Order(conds ...field.Expr) INodeDo
	Distinct(cols ...field.Expr) INodeDo
	Omit(cols ...field.Expr) INodeDo
	Join(table schema.Tabler, on ...field.Expr) INodeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) INodeDo
	RightJoin(table schema.Tabler, on ...field.Expr) INodeDo
	Group(cols ...field.Expr) INodeDo
	Having(conds ...gen.Condition) INodeDo
	Limit(limit int) INodeDo
	Offset(offset int) INodeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) INodeDo
	Unscoped() INodeDo
	Create(values ...*model.Node) error
	CreateInBatches(values []*model.Node, batchSize int) error
	Save(values ...*model.Node) error
	First() (*model.Node, error)
	Take() (*model.Node, error)
	Last() (*model.Node, error)
	Find() ([]*model.Node, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Node, err error)
	FindInBatches(result *[]*model.Node, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Node) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) INodeDo
	Assign(attrs ...field.AssignExpr) INodeDo
	Joins(fields ...field.RelationField) INodeDo
	Preload(fields ...field.RelationField) INodeDo
	FirstOrInit() (*model.Node, error)
	FirstOrCreate() (*model.Node, error)
	FindByPage(offset int, limit int) (result []*model.Node, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) INodeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (n nodeDo) Debug() INodeDo {
	return n.withDO(n.DO.Debug())
}

func (n nodeDo) WithContext(ctx context.Context) INodeDo {
	return n.withDO(n.DO.WithContext(ctx))
}

func (n nodeDo) ReadDB() INodeDo {
	return n.Clauses(dbresolver.Read)
}

func (n nodeDo) WriteDB() INodeDo {
	return n.Clauses(dbresolver.Write)
}

func (n nodeDo) Clauses(conds ...clause.Expression) INodeDo {
	return n.withDO(n.DO.Clauses(conds...))
}

func (n nodeDo) Returning(value interface{}, columns ...string) INodeDo {
	return n.withDO(n.DO.Returning(value, columns...))
}

func (n nodeDo) Not(conds ...gen.Condition) INodeDo {
	return n.withDO(n.DO.Not(conds...))
}

func (n nodeDo) Or(conds ...gen.Condition) INodeDo {
	return n.withDO(n.DO.Or(conds...))
}

func (n nodeDo) Select(conds ...field.Expr) INodeDo {
	return n.withDO(n.DO.Select(conds...))
}

func (n nodeDo) Where(conds ...gen.Condition) INodeDo {
	return n.withDO(n.DO.Where(conds...))
}

func (n nodeDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) INodeDo {
	return n.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (n nodeDo) Order(conds ...field.Expr) INodeDo {
	return n.withDO(n.DO.Order(conds...))
}

func (n nodeDo) Distinct(cols ...field.Expr) INodeDo {
	return n.withDO(n.DO.Distinct(cols...))
}

func (n nodeDo) Omit(cols ...field.Expr) INodeDo {
	return n.withDO(n.DO.Omit(cols...))
}

func (n nodeDo) Join(table schema.Tabler, on ...field.Expr) INodeDo {
	return n.withDO(n.DO.Join(table, on...))
}

func (n nodeDo) LeftJoin(table schema.Tabler, on ...field.Expr) INodeDo {
	return n.withDO(n.DO.LeftJoin(table, on...))
}

func (n nodeDo) RightJoin(table schema.Tabler, on ...field.Expr) INodeDo {
	return n.withDO(n.DO.RightJoin(table, on...))
}

func (n nodeDo) Group(cols ...field.Expr) INodeDo {
	return n.withDO(n.DO.Group(cols...))
}

func (n nodeDo) Having(conds ...gen.Condition) INodeDo {
	return n.withDO(n.DO.Having(conds...))
}

func (n nodeDo) Limit(limit int) INodeDo {
	return n.withDO(n.DO.Limit(limit))
}

func (n nodeDo) Offset(offset int) INodeDo {
	return n.withDO(n.DO.Offset(offset))
}

func (n nodeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) INodeDo {
	return n.withDO(n.DO.Scopes(funcs...))
}

func (n nodeDo) Unscoped() INodeDo {
	return n.withDO(n.DO.Unscoped())
}

func (n nodeDo) Create(values ...*model.Node) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Create(values)
}

func (n nodeDo) CreateInBatches(values []*model.Node, batchSize int) error {
	return n.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (n nodeDo) Save(values ...*model.Node) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Save(values)
}

func (n nodeDo) First() (*model.Node, error) {
	if result, err := n.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Node), nil
	}
}

func (n nodeDo) Take() (*model.Node, error) {
	if result, err := n.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Node), nil
	}
}

func (n nodeDo) Last() (*model.Node, error) {
	if result, err := n.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Node), nil
	}
}

func (n nodeDo) Find() ([]*model.Node, error) {
	result, err := n.DO.Find()
	return result.([]*model.Node), err
}

func (n nodeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Node, err error) {
	buf := make([]*model.Node, 0, batchSize)
	err = n.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (n nodeDo) FindInBatches(result *[]*model.Node, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return n.DO.FindInBatches(result, batchSize, fc)
}

func (n nodeDo) Attrs(attrs ...field.AssignExpr) INodeDo {
	return n.withDO(n.DO.Attrs(attrs...))
}

func (n nodeDo) Assign(attrs ...field.AssignExpr) INodeDo {
	return n.withDO(n.DO.Assign(attrs...))
}

func (n nodeDo) Joins(fields ...field.RelationField) INodeDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Joins(_f))
	}
	return &n
}

func (n nodeDo) Preload(fields ...field.RelationField) INodeDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Preload(_f))
	}
	return &n
}

func (n nodeDo) FirstOrInit() (*model.Node, error) {
	if result, err := n.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Node), nil
	}
}

func (n nodeDo) FirstOrCreate() (*model.Node, error) {
	if result, err := n.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Node), nil
	}
}

func (n nodeDo) FindByPage(offset int, limit int) (result []*model.Node, count int64, err error) {
	result, err = n.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = n.Offset(-1).Limit(-1).Count()
	return
}

func (n nodeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = n.Count()
	if err != nil {
		return
	}

	err = n.Offset(offset).Limit(limit).Scan(result)
	return
}

func (n nodeDo) Scan(result interface{}) (err error) {
	return n.DO.Scan(result)
}

func (n nodeDo) Delete(models ...*model.Node) (result gen.ResultInfo, err error) {
	return n.DO.Delete(models)
}

func (n *nodeDo) withDO(do gen.Dao) *nodeDo {
	n.DO = *do.(*gen.DO)
	return n
}
